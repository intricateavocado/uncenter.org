---
import {
	domain,
	lang,
	analytics,
	description,
	keywords,
	author,
} from '@/data/site';
import { urlize } from '@/data/url';
import { capitalize } from '@/utils';
import nav from '@/data/nav';

import GitHub from '~icons/simple-icons/github';
import Mastodon from '~icons/simple-icons/mastodon';
import Element from '~icons/simple-icons/element';
import Kofi from '~icons/simple-icons/kofi';
import Liberapay from '~icons/simple-icons/liberapay';
import Rss from '~icons/simple-icons/rss';
import Styles from '@/components/Styles.astro';
import { object } from 'astro/zod';

let props = Astro.props;
const title = props.title ? props.title + ' - ' + domain : domain;
---

<!doctype html>
<html lang={lang}>
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>{title}</title>
		<script is:inline>
			function getSystemTheme() {
				return window.matchMedia('(prefers-color-scheme: dark)').matches
					? 'dark'
					: 'light';
			}

			function setMetaThemeColor(theme) {
				if (theme === 'system') theme = getSystemTheme();
				const metaThemeColor = document.querySelector(
					"meta[name='theme-color']",
				);
				if (!metaThemeColor) return;
				metaThemeColor.setAttribute(
					'content',
					getComputedStyle(document.documentElement).getPropertyValue(
						`--${theme}`,
					),
				);
			}

			function setTheme(theme, options) {
				const { permanent, update } = {
					permanent: true,
					update: true,
					...options,
				};
				if (permanent) localStorage.setItem('theme', theme);
				if (theme === 'system') theme = getSystemTheme();
				document.documentElement.setAttribute('theme', theme);
				document.documentElement.style.setProperty(
					'color-scheme',
					theme,
				);
				setMetaThemeColor(theme);
				if (update) loadGiscus();
			}

			const queryParameters = new URLSearchParams(window.location.search);
			const validThemes = new Set(['light', 'dark', 'system']);

			let theme;
			let storedTheme = localStorage.getItem('theme');
			let overrideTheme;

			if (queryParameters.has('theme')) {
				overrideTheme = queryParameters.get('theme');
			}

			theme = overrideTheme || storedTheme;
			if (!theme || !validThemes.has(theme)) {
				theme = validThemes.has(storedTheme) ? storedTheme : 'system';
			}
			setTheme(theme, {
				permanent: theme === overrideTheme ? false : true,
				update: false,
			});
		</script>
		<style>
			@font-face {
				font-family: 'General Sans';
				font-style: normal;
				font-weight: 200 700;
				font-display: swap;
				src: url('/fonts/GeneralSans-Variable.woff2') format('woff2');
			}

			@font-face {
				font-family: 'General Sans';
				font-style: italic;
				font-weight: 200 700;
				font-display: swap;
				src: url('/fonts/GeneralSans-VariableItalic.woff2')
					format('woff2');
			}
		</style>
		<link
			rel="preload"
			as="font"
			type="font/woff2"
			href="/fonts/GeneralSans-Variable.woff2"
			crossorigin="anonymous"
		/>

		<script
			async
			src={analytics.script}
			data-website-id={analytics.websiteId}></script>
		<meta name="author" content={author.name} />
		<meta
			name="description"
			content={props.description ? props.description : description}
		/>
		<meta name="generator" content={Astro.generator} />
		<meta name="keywords" content={keywords.join(', ')} />

		<link
			rel="apple-touch-icon"
			sizes="180x180"
			href="/apple-touch-icon.png?v=20230717"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="32x32"
			href="/favicon-32x32.png?v=20230717"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="16x16"
			href="/favicon-16x16.png?v=20230717"
		/>
		<link rel="manifest" href="/site.webmanifest?v=20230717" />
		<link rel="shortcut icon" href="/favicon.ico?v=20230717" />
		<meta name="msapplication-TileColor" content="#2d89ef" />
		<meta name="theme-color" content="#ffffff" />
		<meta name="view-transition" content="same-origin" />

		<link href={author.github.url} rel="me" />
		<link href={author.mastodon.url} rel="me" />

		<link rel="canonical" href={urlize(props.url)} />
		<link
			rel="alternate"
			type="application/rss+xml"
			href={urlize('feed.xml')}
		/>
		<link
			rel="alternate"
			type="application/json"
			href={urlize('feed.json')}
		/>

		{
			props.post && (
				<>
					<meta property="og:type" content="article" />
					<meta
						property="og:article:published_time"
						content={props.date}
					/>
					<meta property="og:article:section" content="Technology" />
					{props.tags.map((tag: any) => (
						<meta
							property="og:article:tag"
							content={capitalize(tag)}
						/>
					))}
				</>
			)
		}
		{!props.post && <meta property="og:type" content="website" />}

		<meta property="og:title" content={title} />
		<meta
			property="og:description"
			content={props.description ? props.description : description}
		/>
		<meta property="og:image" content={urlize('/1024w.png')} />

		<meta name="twitter:card" content="summary" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:image" content={urlize('/1024w.png')} />
	</head>
	<body class="bg-bg text-fg font-display mx-auto max-w-[120ch]">
		<header
			class="flex flex-col sm:flex-row gap-6 sm:gap-0 sm:space-y-0 justify-between leading-6 py-8"
		>
			<a
				href="/"
				class="not-fancy flex flex-row items-center gap-3"
				aria-current={props.url === '/' ? 'page' : false}
				aria-label={props.url !== '/' ? 'Go to home page' : ''}
			>
				<img
					src={urlize('/square.webp').href}
					class="rounded-full"
					width="32"
					height="32"
					alt="My profile picture, an AI generated image of a circular building with white walls, skylight, blue sky, and fluffy clouds."
				/>
				<span class="tracking-tight text-xl">{author.name}</span>
			</a>
			<nav>
				<ul
					class="m-0 p-0 flex flex-col sm:flex-row gap-4 list-none items-baseline"
				>
					{
						Object.entries(nav.header).map(([title, url]) => (
							<li>
								<a href={url} class={'not-fancy'}>
									{title}
								</a>
							</li>
						))
					}
				</ul>
			</nav>
		</header>
	</body>
	<main class="mx-auto w-[95%] md:w-[90%] max-w-[80ch]">
		<slot />
	</main>
	<footer
		class="flex flex-col py-8 items-center self-center w-full gap-2 leading-normal"
	>
		<ul
			id="social-icons"
			class="m-0 p-0 flex gap-4 justify-center list-none items-baseline"
		>
			<li>
				<a
					rel="me noreferrer"
					href={author.github.url}
					data-umami-event="author-github"
					class="not-fancy dark:text-white"><GitHub /></a
				>
			</li>
			<li>
				<a
					rel="me noreferrer"
					href={author.mastodon.url}
					data-umami-event="author-mastodon"
					class="not-fancy"><Mastodon /></a
				>
			</li>
		</ul>
		<div class="flex flex-row text-center gap-x-3 text-xs">
			<a
				href="https://üï∏üíç.ws/previous"
				class="not-fancy"
				data-umami-event="indie-webring-previous">‚Üê</a
			>
			<a
				href="https://üï∏üíç.ws"
				class="not-fancy"
				data-umami-event="indie-webring-home">IndieWeb Webring</a
			>
			<a
				href="https://üï∏üíç.ws/next"
				class="not-fancy"
				data-umami-event="indie-webring-next">‚Üí</a
			>
		</div>
		<div class="flex flex-row text-center gap-x-2 text-xs">
			{
				Object.entries(nav.footer).map(([title, url], index) => {
					let last = false;
					if (index === Object.entries(nav.footer).length - 1) {
						last = true;
					}
					return (
						<>
							<a
								class="not-fancy underline underline-offset-2"
								href={url}
							>
								{title}
							</a>
							{!last && '¬∑'}
						</>
					);
				})
			}
		</div>
		<select
			aria-label="Theme selector"
			id="theme-selector"
			class="text-center text-fg bg-bg border-2 border-gray-300 rounded-md focus:outline-none mt-1"
		>
			<option value="light">Light</option>
			<option value="dark">Dark</option>
			<option value="system">System</option>
		</select>
	</footer>
</html>

<script is:inline>
	function loadGiscus() {
		if (!document.querySelector('#comments')) return;
		let giscusAttributes = {
			src: 'https://giscus.app/client.js',
			'data-repo': 'uncenter/uncenter.dev',
			'data-repo-id': 'R_kgDOHSjhjQ',
			'data-category-id': 'DIC_kwDOHSjhjc4CTQUr',
			'data-mapping': 'title',
			'data-reactions-enabled': '1',
			'data-emit-metadata': '0',
			'data-input-position': 'top',
			'data-theme': document.documentElement.getAttribute('theme'),
			'data-lang': 'en',
			crossorigin: 'anonymous',
			async: '',
		};
		let giscusScript = document.createElement('script');
		Object.entries(giscusAttributes).forEach(([key, value]) =>
			giscusScript.setAttribute(key, value),
		);
		document.querySelector('#comments').innerHTML = '';
		document.querySelector('#comments').appendChild(giscusScript);
	}
	window.addEventListener('DOMContentLoaded', () => {
		setMetaThemeColor(localStorage.getItem('theme'));
		if (document.querySelector('#theme-selector')) {
			document.querySelector('#theme-selector').value =
				localStorage.getItem('theme');
			document
				.querySelector('#theme-selector')
				.addEventListener('change', function () {
					let selectedTheme = this.value;
					setTheme(selectedTheme);
				});
		}
		window
			.matchMedia('(prefers-color-scheme: dark)')
			.addEventListener('change', (e) => {
				if (localStorage.getItem('theme') === 'system')
					setTheme('system');
			});
		loadGiscus();
	});
</script>

<Styles />
